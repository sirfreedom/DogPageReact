import { useState, useEffect } from 'react';

export default function LocationTimeApp() {
  const [location, setLocation] = useState<{
    latitude: number | null;
    longitude: number | null;
  }>({
    latitude: null,
    longitude: null
  });
  const [time, setTime] = useState<string>('');
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  const getCurrentLocation = () => {
    setIsLoading(true);
    setError(null);
    
    if (!navigator.geolocation) {
      setError('Geolocation is not supported by your browser');
      setIsLoading(false);
      return;
    }

    navigator.geolocation.getCurrentPosition(
      (position) => {
        setLocation({
          latitude: position.coords.latitude,
          longitude: position.coords.longitude
        });
        updateTime();
        setIsLoading(false);
      },
      (err) => {
        setError(`Unable to retrieve your location: ${err.message}`);
        setIsLoading(false);
      }
    );
  };

  const updateTime = () => {
    const now = new Date();
    const formattedTime = now.toLocaleTimeString('es-ES', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
    setTime(formattedTime);
  };

  useEffect(() => {
    let interval: NodeJS.Timeout | null = null;
    
    if (location.latitude !== null) {
      updateTime();
      interval = setInterval(updateTime, 1000);
    }
    
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [location]);

  return (
    <div style={{
      minHeight: '100vh',
      backgroundColor: '#f8fafc',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      padding: '16px'
    }}>
      <div style={{
        width: '100%',
        maxWidth: '448px',
        backgroundColor: 'white',
        borderRadius: '8px',
        boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
        padding: '24px'
      }}>
        <h2 style={{
          fontSize: '20px',
          fontWeight: 'bold',
          marginBottom: '8px',
          display: 'flex',
          alignItems: 'center',
          gap: '8px'
        }}>
          <span>⏱️</span>
          Ubicación y Hora
        </h2>
        <p style={{ color: '#64748b', marginBottom: '16px' }}>
          Obtén tu ubicación actual y la hora exacta
        </p>

        <div style={{ marginBottom: '16px' }}>
          <h3 style={{ fontWeight: '500', marginBottom: '8px' }}>Ubicación:</h3>
          {location.latitude !== null ? (
            <div style={{
              backgroundColor: '#f1f5f9',
              padding: '12px',
              borderRadius: '6px'
            }}>
              <p>Latitud: {location.latitude.toFixed(6)}</p>
              <p>Longitud: {location.longitude?.toFixed(6)}</p>
            </div>
          ) : (
            <p style={{ color: '#64748b', fontStyle: 'italic' }}>No se ha obtenido la ubicación</p>
          )}
        </div>

        <div style={{ marginBottom: '16px' }}>
          <h3 style={{ fontWeight: '500', marginBottom: '8px' }}>Hora actual:</h3>
          {time ? (
            <div style={{
              backgroundColor: '#f1f5f9',
              padding: '12px',
              borderRadius: '6px',
              textAlign: 'center'
            }}>
              <p style={{ fontSize: '24px', fontWeight: 'bold' }}>{time}</p>
            </div>
          ) : (
            <p style={{ color: '#64748b', fontStyle: 'italic' }}>Hora no disponible</p>
          )}
        </div>

        {error && (
          <div style={{
            backgroundColor: '#fee2e2',
            border: '1px solid #fecaca',
            color: '#b91c1c',
            padding: '12px',
            borderRadius: '6px',
            marginBottom: '16px'
          }}>
            {error}
          </div>
        )}

        <button
          onClick={getCurrentLocation}
          disabled={isLoading}
          style={{
            width: '100%',
            backgroundColor: isLoading ? '#9ca3af' : '#3b82f6',
            color: 'white',
            padding: '8px 16px',
            borderRadius: '6px',
            border: 'none',
            cursor: isLoading ? 'not-allowed' : 'pointer',
            fontSize: '16px'
          }}
        >
          {isLoading ? 'Obteniendo datos...' : 'Obtener ubicación y hora'}
        </button>
      </div>
    </div>
  );
}

https://llamacoder.together.ai/chats/2VSo5NzSSym5NJ7w